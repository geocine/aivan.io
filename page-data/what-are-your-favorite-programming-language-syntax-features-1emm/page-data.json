{"componentChunkName":"component---src-templates-post-js","path":"/what-are-your-favorite-programming-language-syntax-features-1emm/","webpackCompilationHash":"7dab3c869d8f6b448c36","result":{"data":{"allDevArticles":{"edges":[{"node":{"article":{"title":"What are your favorite programming language syntax features?","slug":"what-are-your-favorite-programming-language-syntax-features-1emm","body_html":"<p>I have my own non-exhaustive list, and these are purely based on what I have used: <em>JavaScript, TypeScript, C#</em></p>\n\n<h1>\n  <a name=\"safe-navigation-operator\" href=\"#safe-navigation-operator\" class=\"anchor\">\n  </a>\n  Safe Navigation Operator\n</h1>\n\n<p>This is also known as <em>optional chaining operator</em>, <em>safe call operator</em>, <em>null-conditional operator</em>.</p>\n\n<p>Instead of writing multiple nested ifs, we just use usual chaining, but put question mark symbols <code>?</code> before dots (or other characters used for chaining).<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight csharp\"><code><span class=\"n\">String</span> <span class=\"n\">name</span> <span class=\"p\">=</span> <span class=\"n\">articles</span><span class=\"p\">?[</span><span class=\"m\">0</span><span class=\"p\">]?.</span><span class=\"n\">author</span><span class=\"p\">?.</span><span class=\"n\">name</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n\n<h1>\n  <a name=\"null-coalescing-operator\" href=\"#null-coalescing-operator\" class=\"anchor\">\n  </a>\n  Null Coalescing Operator\n</h1>\n\n<p>This is the shorthand of the ternary conditional if operator <code>x ? x : y</code><br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight csharp\"><code><span class=\"kt\">string</span> <span class=\"n\">pageTitle</span> <span class=\"p\">=</span> <span class=\"n\">suppliedTitle</span> <span class=\"p\">??</span> <span class=\"s\">\"Default Title\"</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n\n<p>In JavaScript the OR operator <code>||</code> has the same behavior as the above. It returns the first operand if it evaluates to true, otherwise, it returns the second operand. When the left hand side is true, the right hand side is not even evaluated; it is \"short-circuited.\"<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code> <span class=\"kd\">let</span> <span class=\"nx\">pageTitle</span> <span class=\"o\">=</span> <span class=\"nx\">suppliedTitle</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Default Title</span><span class=\"dl\">\"</span>\n</code></pre></div>\n\n\n\n<h1>\n  <a name=\"lambda\" href=\"#lambda\" class=\"anchor\">\n  </a>\n  Lambda\n</h1>\n\n<p>This is also known as anonymous function, function literal, lambda abstraction, or lambda expression.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">hello</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">`Hello </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n</code></pre></div>\n\n\n\n<p>You can do a lot of things with this construct. <a href=\"https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983\">Currying</a>, <a href=\"https://dev.to/yaminmhd/understanding-javascript-closures-1fk7\">closures</a>, <a href=\"https://eloquentjavascript.net/05_higher_order.html\">high order functions</a> etc. </p>\n\n<h1>\n  <a name=\"auto-implemented-properties\" href=\"#auto-implemented-properties\" class=\"anchor\">\n  </a>\n  Auto Implemented Properties\n</h1>\n\n<p>In C# auto-implemented properties make property-declaration more concise when no additional logic is required in the property accessors.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight csharp\"><code><span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">Name</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>In C# 6 and later, you can initialize auto-implemented properties similarly to fields:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight csharp\"><code><span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">FirstName</span> <span class=\"p\">{</span> <span class=\"k\">get</span><span class=\"p\">;</span> <span class=\"k\">set</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"p\">=</span> <span class=\"s\">\"Jane\"</span><span class=\"p\">;</span> \n</code></pre></div>\n\n\n\n<p>You can learn more about automatic properties <a href=\"https://gunnarpeipman.com/csharp/automatic-properties/\">here</a></p>\n\n<h1>\n  <a name=\"asyncawait\" href=\"#asyncawait\" class=\"anchor\">\n  </a>\n  Async/Await\n</h1>\n\n<p>The async/await pattern is a syntactic feature of many programming languages that allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function.</p>\n\n<p>C#<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight csharp\"><code><span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"n\">Task</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"nf\">FindPageSize</span><span class=\"p\">(</span><span class=\"n\">Uri</span> <span class=\"n\">uri</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>\n    <span class=\"kt\">byte</span><span class=\"p\">[]</span> <span class=\"n\">data</span> <span class=\"p\">=</span> <span class=\"k\">await</span> <span class=\"k\">new</span> <span class=\"nf\">WebClient</span><span class=\"p\">().</span><span class=\"nf\">DownloadDataTaskAsync</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">Length</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>JS<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">createNewDoc</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">({});</span> <span class=\"c1\">// post a new doc</span>\n  <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">);</span> <span class=\"c1\">// find by id</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<h1>\n  <a name=\"intersection-union-types\" href=\"#intersection-union-types\" class=\"anchor\">\n  </a>\n  Intersection / Union Types\n</h1>\n\n<p>In TypeScript, the intersection type combines types, so that you can have all properties and members of both types on your particular object or method.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"nx\">target</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">&amp;</span> <span class=\"nx\">Element</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n\n<p>Union types, meanwhile, are an either/or scenario. Instead of combining types to receive all members and properties, we use union types to specify that a method accepts either of several different types.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"nx\">target</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">|</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n</code></pre></div>\n\n\n\n<h1>\n  <a name=\"json-serialize-deserialize\" href=\"#json-serialize-deserialize\" class=\"anchor\">\n  </a>\n  JSON Serialize / Deserialize\n</h1>\n\n<p>JavaScript makes it very easy for us to serialize and deserialize JSON.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Aivan</span><span class=\"dl\">'</span> <span class=\"p\">}</span>\n<span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"c1\">// serialize object to JSON string</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">str</span> <span class=\"o\">=</span> <span class=\"s2\">`{name : \"Aivan\"}`</span>\n<span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"c1\">// deserialize string to object </span>\n</code></pre></div>\n\n\n\n<h1>\n  <a name=\"template-literals\" href=\"#template-literals\" class=\"anchor\">\n  </a>\n  Template Literals\n</h1>\n\n<p>Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"s2\">`string text \n   </span><span class=\"p\">${</span><span class=\"nx\">expression</span><span class=\"p\">}</span><span class=\"s2\"> \n string text`</span>\n</code></pre></div>\n\n\n\n<h1>\n  <a name=\"destructuring-and-spread-operator\" href=\"#destructuring-and-spread-operator\" class=\"anchor\">\n  </a>\n  Destructuring and Spread Operator\n</h1>\n\n<p>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">rest</span><span class=\"p\">;</span>\n<span class=\"p\">[</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">];</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// 10</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 20</span>\n\n<span class=\"p\">[</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">rest</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">];</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// 10</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 20</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">rest</span><span class=\"p\">);</span> <span class=\"c1\">// [30, 40, 50]</span>\n\n<span class=\"p\">({</span> <span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">20</span> <span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// 10</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 20</span>\n\n<span class=\"p\">({</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">rest</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"na\">b</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"na\">c</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"na\">d</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// 10</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 20</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">rest</span><span class=\"p\">);</span> <span class=\"c1\">// {c: 30, d: 40}</span>\n</code></pre></div>\n\n\n\n<p>This is taken from the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">MDN</a></p>\n\n<h1>\n  <a name=\"object-property-value-shorthand\" href=\"#object-property-value-shorthand\" class=\"anchor\">\n  </a>\n  Object Property Value Shorthand\n</h1>\n\n<p>Instead of writing your objects like this:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Aivan</span><span class=\"dl\">'</span>\n<span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">name</span> <span class=\"p\">}</span> <span class=\"c1\">// { name: 'Aivan'}</span>\n</code></pre></div>\n\n\n\n<p>You can write it like this. This is possible if the name of the key and the variable name of the value is the same.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Aivan</span><span class=\"dl\">'</span>\n<span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">name</span> <span class=\"p\">}</span> <span class=\"c1\">// { name: 'Aivan'}</span>\n</code></pre></div>\n\n\n\n<h1>\n  <a name=\"annotations-decorators\" href=\"#annotations-decorators\" class=\"anchor\">\n  </a>\n  Annotations / Decorators\n</h1>\n\n<p>Decorators provide a very simple syntax for calling higher-order function. It also allows for a cleaner syntax for applying wrappers around your code, resulting in something that detracts less from the actual intention of what you’re writing.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"p\">@</span><span class=\"nd\">Wove</span><span class=\"p\">()</span>\n<span class=\"kd\">class</span> <span class=\"nx\">DataMapper</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n\n</code></pre></div>\n\n\n\n<p>You can learn more about decorators <a href=\"https://blog.mgechev.com/2018/01/29/javascript-decorators-aop-autobind-memoization/\">here</a>.</p>\n\n<h1>\n  <a name=\"default-parameters\" href=\"#default-parameters\" class=\"anchor\">\n  </a>\n  Default Parameters\n</h1>\n\n<p>Default parameters allow named parameters to be initialized with default values if no value or undefined is passed.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">multiply</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">*</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// you can call it like this</span>\n<span class=\"nx\">multiply</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">// 1</span>\n<span class=\"nx\">multiply</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">// 4</span>\n</code></pre></div>\n\n\n\n"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":89352}}}